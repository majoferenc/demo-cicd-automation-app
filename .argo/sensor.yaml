apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: test-dep
      eventSourceName: github
      eventName: example
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value:
              - push
          - path: body.ref
            type: string
            value:
              - refs/heads/master
              - refs/heads/main
  triggers:
    - template:
        name: github-workflow-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: spring-boot-app-build-
                annotations:
                  workflows.argoproj.io/description: |
                    Build and push a container image using BuildKit.
                  workflows.argoproj.io/maintainer: '@your_username'
                  workflows.argoproj.io/tags: build, spring-boot
              spec:
                volumeClaimTemplates:
                - metadata:
                    name: repo-volume
                  spec:
                    accessModes: [ "ReadWriteOnce" ]
                    resources:
                      requests:
                        storage: 1Gi
                volumes:
                  - name: dockerconfig
                    secret:
                      secretName: config.json
                  - name: git-credentials
                    secret:
                      secretName: git-credentials-secret
                entrypoint: dag-target
                templates:
                - name: dag-target
                  steps:
                  - - name: git-clone
                      template: git-clone
                  - - name: gradle-build
                      template: gradle-build
                    - name: gradle-test
                      template: gradle-test
                  - - name: docker-build
                      template: docker-build
                  - - name: update-helm-version
                      template: update-helm-version

                - name: git-clone
                  container:
                    image: alpine/git
                    command: [ "/bin/sh", "-c" ]
                    args:
                      - |
                        # Clone the repository using the credentials
                        git clone $GIT_REPO_BASE_PATH/JKIPIKA/demo-cicd-automation-app.git /workspace
                    env:
                      - name: GIT_REPO_BASE_PATH
                        valueFrom:
                          secretKeyRef:
                            name: git-credentials-secret
                            key: .git-credentials
                    volumeMounts:
                    - name: repo-volume
                      mountPath: /workspace
                - name: gradle-test
                  container:
                    image: gradle:jdk17
                    command: ["gradle", "test", "-i", "--parallel"]
                    workingDir: /workspace
                    volumeMounts:
                      - name: repo-volume
                        mountPath: /workspace
                - name: gradle-build
                  container:
                    image: gradle:jdk17
                    command: ["gradle", "bootJar", "-i", "--parallel"]
                    workingDir: /workspace
                    volumeMounts:
                    - name: repo-volume
                      mountPath: /workspace
                - name: docker-build
                  container:
                    image: moby/buildkit:v0.13.0-rootless
                    volumeMounts:
                    - name: dockerconfig
                      mountPath: /.docker
                    - name: repo-volume
                      mountPath: /workspace
                    env:
                      - name: BUILDKITD_FLAGS
                        value: --oci-worker-no-process-sandbox
                      - name: DOCKER_CONFIG
                        value: /.docker
                    command: [ "/bin/sh", "-c" ]
                    args:
                      - |
                        set -x
                        git config --global --add safe.directory /workspace
                        export GIT_HASH=$(git rev-parse --short HEAD)
                        echo $GIT_HASH
                        buildctl-daemonless.sh build --frontend dockerfile.v0 --local context=. --local dockerfile=. --output type=image,name=docker.io/jkipika/argo-demo-app:$GIT_HASH,push=true
                    workingDir: /workspace
                - name: update-helm-version
                  container:
                    image: alpine/git
                    command: ["/bin/sh", "-c"]
                    args:
                      - |
                        set -x
                        git clone $GIT_REPO_BASE_PATH/JKIPIKA/demo-cicd-automation-app.git
                        cd demo-cicd-automation-app

                        export GIT_HASH=$(git rev-parse --short HEAD)
                        echo $GIT_HASH

                        export YQ_VERSION=v4.40.7
                        export YQ_BINARY=yq_linux_amd64
                        wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${YQ_BINARY} -O yq
                        chmod +x ./yq

                        # Update the values.yaml file with the Git hash
                        ./yq e -i '.image.tag = env(GIT_HASH)' chart/values.yaml

                        # Commit the changes
                        git config --global user.email "workflow@argo.io"
                        git config --global user.name "Argo Workflow"
                        git add chart/values.yaml
                        git commit -m "Update image tag to Git hash: $GIT_HASH"

                        # Push the changes to the Git repository
                        git push origin main
                    env:
                    - name: GIT_REPO_BASE_PATH
                      valueFrom:
                        secretKeyRef:
                          name: git-credentials-secret
                          key: .git-credentials
